/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ubiqube.etsi.mec.meo.v211.controller.pkg;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.ubiqube.etsi.mec.meo.v211.model.pkg.AppD;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.ProblemDetails;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "onboarded_app_packages", description = "the onboarded_app_packages API")
public interface OnboardedAppPackages211MepmApi {

    @ApiOperation(value = "Reads the content of the AppD of on-boarded individual application package resources.", nickname = "appDGET", notes = "Reads the content of the AppD of on-boarded individual application package resources.", response = AppD.class, tags = { "app-pkgm", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Content of the AppD is returned.", response = AppD.class),
            @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
            @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
            @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
            @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
            @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
            @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/onboarded_app_packages/{appDId}/appd", produces = { "text/plain", "application/zip", "application/json" }, method = RequestMethod.GET)
    ResponseEntity<AppD> appDGET(@ApiParam(value = "Identifier of an application descriptor", required = true) @PathVariable("appDId") String appDId, @ApiParam(value = "Attribute-based filtering parameters according to ETSI GS MEC 009") @Valid @RequestParam(value = "filter", required = false) String filter, @ApiParam(value = "Include all complex attributes in the response.") @Valid @RequestParam(value = "all_fields", required = false) String allFields, @ApiParam(value = "Complex attributes of AppPkgInfo to be included into the response") @Valid @RequestParam(value = "fields", required = false) String fields, @ApiParam(value = "Complex attributes of AppPkgInfo to be excluded from the response.") @Valid @RequestParam(value = "exclude_fields", required = false) String excludeFields, @ApiParam(value = "Indicates to exclude the following complex attributes of AppPkgInfo from the response.") @Valid @RequestParam(value = "exclude_default", required = false) String excludeDefault);

    @ApiOperation(value = "Fetch the onboarded application package content identified by appPkgId or appDId.", nickname = "appDIdGET", notes = "Fetch the onboarded application package content identified by appPkgId or appDId.", tags = { "app-pkgm", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD."),
            @ApiResponse(code = 206, message = "Partial content"),
            @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
            @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
            @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
            @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
            @ApiResponse(code = 416, message = "Range Not Satisfiable ."),
            @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
            @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/onboarded_app_packages/{appDId}/package_content", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Void> appDIdGET(@ApiParam(value = "Identifier of an application descriptor", required = true) @PathVariable("appDId") String appDId);

    @ApiOperation(value = "Uploads the content of application package.", nickname = "appDIdPUT", notes = "Uploads the content of application package.", tags = { "app-pkgm", })
    @ApiResponses(value = {
            @ApiResponse(code = 202, message = "The application package has been accepted for uploading, but the processing has not been completed."),
            @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
            @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
            @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
            @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
            @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
            @ApiResponse(code = 409, message = "Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource", response = ProblemDetails.class),
            @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/onboarded_app_packages/{appDId}/package_content", produces = { "application/json" }, consumes = { "application/zip" }, method = RequestMethod.PUT)
    ResponseEntity<Void> appDIdPUT(@ApiParam(value = "Identifier of an application descriptor", required = true) @PathVariable("appDId") String appDId, @ApiParam(value = "") @Valid @RequestBody Object body);

}
