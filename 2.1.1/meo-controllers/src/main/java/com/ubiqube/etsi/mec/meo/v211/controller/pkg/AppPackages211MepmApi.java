/**
 *     Copyright (C) 2019-2020 Ubiqube.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ubiqube.etsi.mec.meo.v211.controller.pkg;

import javax.validation.Valid;

import org.springframework.core.io.Resource;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.hateoas.MediaTypes;
import org.springframework.hateoas.server.ExposesResourceFor;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.ubiqube.etsi.mec.meo.v211.model.pkg.AppD;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.AppPkgInfo;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.AppPkgInfoModifications;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.CreateAppPkg;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.ProblemDetails;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

/**
 *
 * @author Olivier Vignaud <ovi@ubiqube.com>
 *
 */
@Api(value = "app_packages", description = "the app_packages API")
@RequestMapping(value = "/meo/app_pkgm/v1/app_packages", produces = { MediaType.APPLICATION_JSON_VALUE, MediaTypes.HAL_JSON_VALUE })
@ExposesResourceFor(AppPkgInfo.class)
public interface AppPackages211MepmApi {

	int DEFAULT_PAGE_SIZE = 10;
	int DEFAULT_PAGE_NUMBER = 0;

	@ApiOperation(value = "Deletes an individual application package resources", nickname = "appPackageDELETE", notes = "Deletes an individual application package resources", tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 204, message = "No Content"),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@DeleteMapping(value = "/{appPkgId}")
	ResponseEntity<Void> appPackageDELETE(@ApiParam(value = "Identifier of an individual application package resource", required = true) @PathVariable("appPkgId") String appPkgId);

	@ApiOperation(value = "Queries the information related to individual application package resources", nickname = "appPackageGET", notes = "Queries the information related to individual application package resources", response = AppPkgInfo.class, tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Contains a representation of the application package resource", response = AppPkgInfo.class),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@GetMapping(value = "/{appPkgId}")
	ResponseEntity<AppPkgInfo> appPackageGET(@ApiParam(value = "Identifier of an individual application package resource", required = true) @PathVariable("appPkgId") String appPkgId);

	@ApiOperation(value = "Updates the operational state of an individual application package resource", nickname = "appPackagePATCH", notes = "Updates the operational state of an individual application package resources", response = AppPkgInfoModifications.class, tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Shows that the operation has been completed successfully", response = AppPkgInfoModifications.class),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 409, message = "Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@PatchMapping(value = "/{appPkgId}")
	ResponseEntity<AppPkgInfoModifications> appPackagePATCH(@ApiParam(value = "Operational state to be set", required = true) @Valid @RequestBody AppPkgInfoModifications body, @ApiParam(value = "Identifier of an individual application package resource", required = true) @PathVariable("appPkgId") String appPkgId);

	@ApiOperation(value = "Queries information relating to on-boarded application packages in the MEO", nickname = "appPackagesGET", notes = "queries information relating to on-boarded application packages in the MEO", response = AppPkgInfo.class, responseContainer = "List", tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Contains a representation of the application package resource", response = AppPkgInfo.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@GetMapping
	ResponseEntity appPackagesGET(@ApiParam(value = "Attribute-based filtering parameters according to ETSI GS MEC 009") @Valid @RequestParam(value = "filter", required = false) String filter,
			@ApiParam(value = "Include all complex attributes in the response.") @Valid @RequestParam(value = "all_fields", required = false) String allFields,
			@ApiParam(value = "Complex attributes of AppPkgInfo to be included into the response") @Valid @RequestParam(value = "fields", required = false) String fields,
			@ApiParam(value = "Complex attributes of AppPkgInfo to be excluded from the response.") @Valid @RequestParam(value = "exclude_fields", required = false) String excludeFields,
			@ApiParam(value = "Indicates to exclude the following complex attributes of AppPkgInfo from the response.") @Valid @RequestParam(value = "exclude_default", required = false) String excludeDefault,
			@PageableDefault(page = DEFAULT_PAGE_NUMBER, size = DEFAULT_PAGE_SIZE) Pageable pageable);

	@ApiOperation(value = "Create a resource for on-boarding an application package to a MEO", nickname = "appPackagesPOST", notes = "Create a resource for on-boarding an application package to a MEO", response = AppPkgInfo.class, responseContainer = "List", tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 201, message = "Successful response for resource creation", response = AppPkgInfo.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@PostMapping
	ResponseEntity<AppPkgInfo> appPackagesPOST(@ApiParam(value = "Resource to be created", required = true) @Valid @RequestBody CreateAppPkg body);

	@ApiOperation(value = "Fetch the onboarded application package content identified by appPkgId or appDId.", nickname = "appPkgGET", notes = "Fetch the onboarded application package content identified by appPkgId or appDId.", tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "The payload body shall contain a copy of the file representing the AppD or a ZIP file that contains the file or multiple files representing the AppD."),
			@ApiResponse(code = 206, message = "Partial content"),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 416, message = "Range Not Satisfiable ."),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@GetMapping(value = "/{appPkgId}/package_content")
	ResponseEntity<Resource> appPkgGetContent(@ApiParam(value = "Identifier of an on-boarded individual application package", required = true) @PathVariable("appPkgId") String appPkgId);

	@ApiOperation(value = "Reads the content of the AppD of on-boarded individual application package resources.", nickname = "appPkgIdGET", notes = "Reads the content of the AppD of on-boarded individual application package resources.", response = AppD.class, tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Content of the AppD is returned.", response = AppD.class),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@GetMapping(value = "/{appPkgId}/appd", produces = { "text/plain", "application/zip", "application/json" })
	ResponseEntity<AppD> appPkgIdGetAppd(@ApiParam(value = "Identifier of an on-boarded individual application package", required = true) @PathVariable("appPkgId") String appPkgId, @ApiParam(value = "Attribute-based filtering parameters according to ETSI GS MEC 009") @Valid @RequestParam(value = "filter", required = false) String filter, @ApiParam(value = "Include all complex attributes in the response.") @Valid @RequestParam(value = "all_fields", required = false) String allFields, @ApiParam(value = "Complex attributes of AppPkgInfo to be included into the response") @Valid @RequestParam(value = "fields", required = false) String fields, @ApiParam(value = "Complex attributes of AppPkgInfo to be excluded from the response.") @Valid @RequestParam(value = "exclude_fields", required = false) String excludeFields, @ApiParam(value = "Indicates to exclude the following complex attributes of AppPkgInfo from the response.") @Valid @RequestParam(value = "exclude_default", required = false) String excludeDefault);

	@ApiOperation(value = "Uploads the content of application package.", nickname = "appPkgPUT", notes = "Uploads the content of application package.", tags = { "app-pkgm", })
	@ApiResponses(value = {
			@ApiResponse(code = 202, message = "The application package has been accepted for uploading, but the processing has not been completed."),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 409, message = "Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@PutMapping(value = "/{appPkgId}/package_content", consumes = { "multipart/form-data" })
	ResponseEntity<Void> appPkgPutContent(@ApiParam(value = "Identifier of an on-boarded individual application package", required = true) @PathVariable("appPkgId") String appPkgId, @RequestParam("file") MultipartFile file);
}
