/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ubiqube.etsi.mec.meo.v211.controller.pkg;

import com.ubiqube.etsi.mec.meo.v211.model.pkg.AppPkgSubscription;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.AppPkgSubscriptionInfo;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.AppPkgSubscriptionLinkList;
import com.ubiqube.etsi.mec.meo.v211.model.pkg.ProblemDetails;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Api(value = "subscriptions", description = "the subscriptions API")
public interface PkgSubscriptions211MepmApi {

    Logger log = LoggerFactory.getLogger(PkgSubscriptions211MepmApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Deletes the individual subscription to notifications about application package changes in MEO.", nickname = "individualSubscriptionDELETE", notes = "Deletes the individual subscription to notifications about application package changes in MEO.", tags={ "app-pkgm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions/{subscriptionId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> individualSubscriptionDELETE(@ApiParam(value = "Identifier of an individual subscription to notifications about application package changes",required=true) @PathVariable("subscriptionId") String subscriptionId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SubscriptionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Used to represent an individual subscription to notifications about application package changes.", nickname = "individualSubscriptionGET", notes = "Used to represent an individual subscription to notifications about application package changes.", response = AppPkgSubscriptionInfo.class, tags={ "app-pkgm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Representation of the resource.", response = AppPkgSubscriptionInfo.class),
        @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions/{subscriptionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AppPkgSubscriptionInfo> individualSubscriptionGET(@ApiParam(value = "Identifier of an individual subscription to notifications about application package changes",required=true) @PathVariable("subscriptionId") String subscriptionId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"subscriptionType\" : \"AppPackageOnBoarding\",\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"http://example.com/aeiou\"\n    }\n  },\n  \"callbackUri\" : \"http://example.com/aeiou\",\n  \"id\" : \"id\"\n}", AppPkgSubscriptionInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SubscriptionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "used to retrieve the information of subscriptions to individual application package resource in MEO", nickname = "subscriptionsGET", notes = "used to retrieve the information of subscriptions to individual application package resource in MEO package", response = AppPkgSubscriptionLinkList.class, tags={ "app-pkgm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of zero or more subscriptions", response = AppPkgSubscriptionLinkList.class),
        @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AppPkgSubscriptionLinkList> subscriptionsGET() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"_links\" : {\n    \"subscriptions\" : [ {\n      \"subsctiptionType\" : \"AppPackageOnBoarding\",\n      \"href\" : \"http://example.com/aeiou\"\n    }, {\n      \"subsctiptionType\" : \"AppPackageOnBoarding\",\n      \"href\" : \"http://example.com/aeiou\"\n    } ],\n    \"self\" : {\n      \"href\" : \"http://example.com/aeiou\"\n    }\n  }\n}", AppPkgSubscriptionLinkList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SubscriptionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Subscribe to notifications about on-boarding an application package", nickname = "subscriptionsPOST", notes = "Subscribe to notifications about on-boarding an application package", response = AppPkgSubscriptionInfo.class, tags={ "app-pkgm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response for created subscription", response = AppPkgSubscriptionInfo.class),
        @ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
        @ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
    @RequestMapping(value = "/subscriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AppPkgSubscriptionInfo> subscriptionsPOST(@ApiParam(value = "The input parameters of subscribe operation to notifications" ,required=true )  @Valid @RequestBody AppPkgSubscription body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"subscriptionType\" : \"AppPackageOnBoarding\",\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"http://example.com/aeiou\"\n    }\n  },\n  \"callbackUri\" : \"http://example.com/aeiou\",\n  \"id\" : \"id\"\n}", AppPkgSubscriptionInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SubscriptionsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
