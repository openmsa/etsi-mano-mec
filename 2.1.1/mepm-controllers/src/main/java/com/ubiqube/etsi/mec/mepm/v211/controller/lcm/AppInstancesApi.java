/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.ubiqube.etsi.mec.mepm.v211.controller.lcm;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.ubiqube.etsi.mec.meo.v211.model.lcm.AppInstanceInfo;
import com.ubiqube.etsi.mec.meo.v211.model.lcm.CreateAppInstanceRequest;
import com.ubiqube.etsi.mec.meo.v211.model.lcm.InstantiateAppRequest;
import com.ubiqube.etsi.mec.meo.v211.model.lcm.OperateAppRequest;
import com.ubiqube.etsi.mec.meo.v211.model.lcm.ProblemDetails;
import com.ubiqube.etsi.mec.meo.v211.model.lcm.TerminateAppRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

/**
 *
 * @author Olivier Vignaud <ovi@ubiqube.com>
 *
 */
@Api(value = "app_instances", description = "the app_instances API")
@RequestMapping("/mepm/app_lcm/v1/app_instances")
public interface AppInstancesApi {

	@ApiOperation(value = "Queries information relating to on-boarded application packages in the MEO", nickname = "appInstanceGET", notes = "queries information relating to on-boarded application packages in the MEO", response = AppInstanceInfo.class, responseContainer = "List", tags = { "", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Array the representations of zero or more application instances", response = AppInstanceInfo.class, responseContainer = "List"),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@RequestMapping(value = "/", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<List<AppInstanceInfo>> appInstanceGET(@ApiParam(value = "Attribute-based filtering parameters according to ETSI GS MEC 009") @Valid @RequestParam(value = "filter", required = false) String filter, @ApiParam(value = "Include all complex attributes in the response.") @Valid @RequestParam(value = "all_fields", required = false) String allFields, @ApiParam(value = "Complex attributes of AppPkgInfo to be included into the response") @Valid @RequestParam(value = "fields", required = false) String fields, @ApiParam(value = "Complex attributes of AppPkgInfo to be excluded from the response.") @Valid @RequestParam(value = "exclude_fields", required = false) String excludeFields, @ApiParam(value = "Indicates to exclude the following complex attributes of AppPkgInfo from the response.") @Valid @RequestParam(value = "exclude_default", required = false) String excludeDefault);

	@ApiOperation(value = "Deletes an  individual application instance resource.", nickname = "appInstanceIdDELETE", notes = "Deletes an  individual application instance resource.", tags = { "", })
	@ApiResponses(value = {
			@ApiResponse(code = 204, message = "No Content"),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 409, message = "Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@RequestMapping(value = "/{appInstanceId}", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> appInstanceIdDELETE(@ApiParam(value = "Identifier of an individual application instance", required = true) @PathVariable("appInstanceId") final String appInstanceId);

	@ApiOperation(value = "Retrieves the information of an individual application instance via reading an individual application instance.", nickname = "appInstanceIdGET", notes = "Retrieves the information of an individual application instance via reading an individual application instance.", response = AppInstanceInfo.class, tags = { "", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "Contains a representation of the read resource.", response = AppInstanceInfo.class),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@RequestMapping(value = "/{appInstanceId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<AppInstanceInfo> appInstanceIdGET(@ApiParam(value = "Identifier of an individual application instance", required = true) @PathVariable("appInstanceId") String appInstanceId);

	@ApiOperation(value = "Create an application instance resource", nickname = "appInstancePOST", notes = "Create an application instance resource", response = AppInstanceInfo.class, tags = { "", })
	@ApiResponses(value = {
			@ApiResponse(code = 201, message = "An application instance identifier and the related resource has been created successfully.", response = AppInstanceInfo.class),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@RequestMapping(value = "/", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<AppInstanceInfo> appInstancePOST(@ApiParam(value = "", required = true) @Valid @RequestBody CreateAppInstanceRequest body);

	@ApiOperation(value = "task of instantiating an application instance.", nickname = "appLcmInstanciatePOST", notes = "task of instantiating an application instance.", tags = { "", })
	@ApiResponses(value = {
			@ApiResponse(code = 202, message = "accepted for processing, but the processing has not yet been completed."),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 409, message = "Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@RequestMapping(value = "/{appInstanceId}/instantiate", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> appLcmInstanciatePOST(@ApiParam(value = "", required = true) @Valid @RequestBody InstantiateAppRequest body, @ApiParam(value = "Identifier of an individual application instance", required = true) @PathVariable("appInstanceId") String appInstanceId);

	@ApiOperation(value = "change the operational state, i.e. start or stop, of the application instance", nickname = "appLcmOperatePOST", notes = "change the operational state, i.e. start or stop, of the application instance", tags = { "", })
	@ApiResponses(value = {
			@ApiResponse(code = 202, message = "accepted for processing, but the processing has not yet been completed."),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 409, message = "Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@RequestMapping(value = "/{appInstanceId}/operate", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> appLcmOperatePOST(@ApiParam(value = "", required = true) @Valid @RequestBody OperateAppRequest body, @ApiParam(value = "Identifier of an individual application instance", required = true) @PathVariable("appInstanceId") String appInstanceId);

	@ApiOperation(value = "terminate an application instance.", nickname = "appLcmTerminatePOST", notes = "terminate an application instance.", tags = { "", })
	@ApiResponses(value = {
			@ApiResponse(code = 202, message = "accepted for processing, but the processing has not yet been completed."),
			@ApiResponse(code = 400, message = "Bad Request : used to indicate that incorrect parameters were passed to the request.", response = ProblemDetails.class),
			@ApiResponse(code = 401, message = "Unauthorized :  used when the client did not submit credentials.", response = ProblemDetails.class),
			@ApiResponse(code = 403, message = "Forbidden :  operation is not allowed given the current status of the resource.", response = ProblemDetails.class),
			@ApiResponse(code = 404, message = "Not Found :  used when a client provided a URI that cannot be mapped to a valid resource URI.", response = ProblemDetails.class),
			@ApiResponse(code = 406, message = "Not Acceptable : used to indicate that the server cannot provide the any of the content formats supported by the client.", response = ProblemDetails.class),
			@ApiResponse(code = 409, message = "Conflict : The operation cannot be executed currently, due to a conflict with the state of the resource", response = ProblemDetails.class),
			@ApiResponse(code = 429, message = "Too Many Requests : used when a rate limiter has triggered.", response = ProblemDetails.class) })
	@RequestMapping(value = "/{appInstanceId}/terminate", produces = { "application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> appLcmTerminatePOST(@ApiParam(value = "", required = true) @Valid @RequestBody TerminateAppRequest body, @ApiParam(value = "Identifier of an individual application instance", required = true) @PathVariable("appInstanceId") String appInstanceId);
}
